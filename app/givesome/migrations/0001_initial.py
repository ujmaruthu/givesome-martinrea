# Generated by Django 2.2.24 on 2023-02-01 09:41

from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import enumfields.fields
import filer.fields.image
import givesome.enums
import jsonfield.fields
import mptt.fields
import parler.fields
import parler.models
import shuup.core.fields
import shuup.utils.analog


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('shuup', '0105_max_decimals_value'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        migrations.swappable_dependency(settings.FILER_IMAGE_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CompletionVideo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.CharField(help_text='Paste a link to a YouTube video.', max_length=120)),
                ('linked_on', models.DateTimeField(auto_now=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='completion_videos', to='shuup.Product')),
            ],
            options={
                'abstract': False,
            },
            bases=(parler.models.TranslatableModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Givecard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(blank=True, help_text='Used for givecard redemption.', max_length=6, null=True, verbose_name='PIN')),
                ('balance', models.PositiveIntegerField(help_text='Balance ($) left on this givecard', verbose_name='value')),
                ('redeemed_on', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='redeemed on')),
                ('automatically_donated', models.PositiveIntegerField(default=0, help_text='Balance ($) from this givecard that was donated automatically', verbose_name='automatically donated amount')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GivecardBatch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='created on')),
                ('generated_on', models.DateTimeField(blank=True, null=True, verbose_name='generated on')),
                ('restriction_type', enumfields.fields.EnumIntegerField(default=1, enum=givesome.enums.GivecardDonateRestrictionType, help_text="Defines how Givecards are allowed to be donated. Office - Givecards can only be used on this Office's branded page. Supplier - Givecards can only be used on vendor's and it's office's branded pages. Disabled - No donation restrictions.", verbose_name='Donation restriction type')),
                ('redemption_start_date', models.DateField(blank=True, help_text='The date and time the Givecard redemption starts. Givecards are not redeemable before this time.', null=True, verbose_name='Redemption start date')),
                ('redemption_end_date', models.DateField(blank=True, help_text='The date and time the Givecard redemption ends. Givecards are not redeemable after this time.', null=True, verbose_name='Redemption end date')),
                ('expiration_date', models.DateField(blank=True, help_text='The date and time on which the Givecard expires. After this it is no longer able to be used, and it will be hidden in donor wallets.', null=True, verbose_name='Expiration date')),
                ('expiry_type', enumfields.fields.EnumIntegerField(default=2, enum=givesome.enums.GivecardBatchExpiryType, help_text='Action taken when Givecard Batch expires. Automatic - Funds are automatically reallocated to active projects through a preset process. Manual - Funds are redirected to Givesome Purse to be manually reallocated to projects. Disabled - Funds are not reallocated to projects, but managed outside Shuup. ', verbose_name='Expiration type')),
                ('amount', models.PositiveIntegerField(default=1, help_text='Quantity of Givecards to generate in this batch.', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100000)], verbose_name='quantity')),
                ('value', models.PositiveIntegerField(default=2, help_text='Value ($) on all the Givecards generated in this batch.', validators=[django.core.validators.MinValueValidator(2), django.core.validators.MaxValueValidator(100000)], verbose_name='value')),
                ('code', models.CharField(blank=True, help_text='Used for givecard redemption. Required for Multicards. This code will be the same for all Multicards in this batch.', max_length=6, null=True, verbose_name='PIN')),
                ('archived', models.BooleanField(default=False, help_text='Archived Givecard Batches are excluded on Vendor dashboards.', verbose_name='Archived')),
            ],
            options={
                'verbose_name_plural': 'givecard batches',
                'ordering': ('-created_on',),
            },
        ),
        migrations.CreateModel(
            name='GivecardPaymentProcessor',
            fields=[
                ('paymentprocessor_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='shuup.PaymentProcessor')),
            ],
            options={
                'verbose_name': 'Givecard processor',
                'verbose_name_plural': 'Givecard processors',
            },
            bases=('shuup.paymentprocessor',),
        ),
        migrations.CreateModel(
            name='GivesomeGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GivesomeOffice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='name')),
                ('ordering', models.IntegerField(default=0, verbose_name='ordering')),
                ('disabled', models.BooleanField(default=False, help_text='Disable this office. This office will not be show in the front for customers anymore. All children offices are affected as well. Any related Givecard restrictions will be left unaffected, which means that if any Batches are restricted to this Office or any child offices, it will be impossible to use any of those Givecards.')),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, help_text='If your office is a sub-office of another office, you can link them here.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='givesome.GivesomeOffice', verbose_name='Parent office')),
                ('primary_project', models.ForeignKey(blank=True, help_text='Selected project will be prioritized when automatically reallocating expiring Givecard funds.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='primary_offices', to='shuup.ShopProduct', verbose_name='Primary project')),
                ('supplier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='offices', to='shuup.Supplier')),
            ],
            options={
                'ordering': ('supplier', 'level', 'ordering'),
            },
        ),
        migrations.CreateModel(
            name='GivesomePurse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('shop', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='purse', to='shuup.Shop', verbose_name='shop')),
                ('supplier', models.OneToOneField(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='purse', to='shuup.Supplier', verbose_name='supplier')),
            ],
            options={
                'verbose_name': 'givesome purse',
                'verbose_name_plural': 'givesome purses',
            },
        ),
        migrations.CreateModel(
            name='ReceiptingMessages',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
            bases=(parler.models.TranslatableModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='SustainabilityGoal',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', shuup.core.fields.InternalIdentifierField(blank=True, editable=False, max_length=64, null=True, unique=False)),
                ('image', filer.fields.image.FilerImageField(blank=True, help_text='Supply an image to illustrate the SDG to your potential donors.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sdg_images', to=settings.FILER_IMAGE_MODEL, verbose_name='image')),
            ],
            options={
                'abstract': False,
            },
            bases=(parler.models.TranslatableModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='VendorInformation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', shuup.core.fields.InternalIdentifierField(blank=True, editable=False, max_length=64, null=True, unique=False)),
            ],
            options={
                'verbose_name_plural': 'Vendor Information',
            },
            bases=(parler.models.TranslatableModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='VolunteerHours',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hours', models.DecimalField(decimal_places=2, help_text='How many hours did you volunteer?', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Hours')),
                ('volunteered_on', models.DateField(help_text='When did you volunteer?', verbose_name='Volunteered on')),
                ('description', models.CharField(help_text='Who did you help?', max_length=68, verbose_name='Where did you volunteer?')),
                ('donor', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='volunteer_hours', to='shuup.PersonContact')),
            ],
        ),
        migrations.CreateModel(
            name='VendorSustainabilityGoals',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('goals', models.ManyToManyField(blank=True, related_name='vendor_sustainability_goals', to='givesome.SustainabilityGoal', verbose_name='vendors')),
                ('vendor', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='vendor_sustainability_goals', to='shuup.Supplier')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='VendorExtra',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vendor_type', enumfields.fields.EnumIntegerField(default=1, enum=givesome.enums.VendorExtraType, help_text='Charities may sign up as charities in order to create charity projects. They may pay to upgrade to Branded Vendor status if they wish, which will enable them to feature their projects on their Branded Vendor Page.', verbose_name='vendor type')),
                ('allow_brand_page', models.BooleanField(default=True)),
                ('allow_purse', models.BooleanField(default=False)),
                ('enable_receipting', models.BooleanField(default=False)),
                ('website_url', models.CharField(blank=True, help_text="Enter the URL of the vendor's website.", max_length=128, null=True, verbose_name='URL')),
                ('color', models.CharField(blank=True, help_text="Enter the hex code of the organization's main colour.", max_length=7, null=True, verbose_name='Hex colour code')),
                ('ordering', models.IntegerField(default=0)),
                ('sponsor_link', models.CharField(blank=True, max_length=128, null=True)),
                ('registration_number', models.CharField(blank=True, max_length=50, null=True)),
                ('show_promoted', models.BooleanField(default=True, help_text='Show promoted projects', verbose_name='Show promoted projects')),
                ('primary_project', models.ForeignKey(blank=True, help_text='Selected project will be prioritized when automatically reallocating expiring Givecard funds.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='primary_suppliers', to='shuup.ShopProduct', verbose_name='Primary project')),
                ('sponsored_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sponsored_charities', to='shuup.Supplier', verbose_name='Sponsored by')),
                ('vendor', models.OneToOneField(help_text='The vendor described by this extra information.', on_delete=django.db.models.deletion.CASCADE, related_name='givesome_extra', to='shuup.Supplier')),
            ],
        ),
        migrations.CreateModel(
            name='SustainabilityGoalLogEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='created on')),
                ('message', models.CharField(max_length=1024, verbose_name='message')),
                ('identifier', models.CharField(blank=True, db_index=True, max_length=256, verbose_name='identifier')),
                ('kind', enumfields.fields.EnumIntegerField(default=0, enum=shuup.utils.analog.LogEntryKind, verbose_name='log entry kind')),
                ('extra', jsonfield.fields.JSONField(blank=True, null=True, verbose_name='extra data')),
                ('target', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='log_entries', to='givesome.SustainabilityGoal', verbose_name='target')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PurchaseReportData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('donation_type', enumfields.fields.EnumIntegerField(default=0, enum=givesome.enums.DonationType, verbose_name='Donation Type')),
                ('receipt', models.BooleanField(default=False, verbose_name='Donor wants receipt')),
                ('givecard', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='purchase_report_data', to='givesome.Givecard')),
                ('payment', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='purchase_report_data', to='shuup.Payment', verbose_name='Payment')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='purchase_report_data', to='shuup.Product')),
                ('promoting_brand', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='purchase_report_data', to='shuup.Supplier', verbose_name='Promoting Brand')),
                ('promoting_office', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='purchase_report_data', to='givesome.GivesomeOffice', verbose_name='Promoting Office')),
            ],
            options={
                'verbose_name': 'Purchase Report Data',
                'verbose_name_plural': 'Purchase Report Data',
            },
        ),
        migrations.CreateModel(
            name='ProjectSustainabilityGoals',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('goals', models.ManyToManyField(blank=True, related_name='project_sustainability_goals', to='givesome.SustainabilityGoal', verbose_name='projects')),
                ('project', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='project_sustainability_goals', to='shuup.ShopProduct')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProjectExtra',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('goal_amount', models.IntegerField()),
                ('available_from', models.DateTimeField(blank=True, db_index=True, help_text='After this date the project will be visible in the store front.', null=True, verbose_name='Available from date')),
                ('fully_funded_date', models.DateTimeField(blank=True, db_index=True, help_text='The date at which the project reached its funding goal.', null=True, verbose_name='Fully funded date')),
                ('lives_impacted', models.IntegerField(default=0, help_text='The total number of projected lives to be impacted.')),
                ('enable_receipting', models.BooleanField(default=False)),
                ('donation_url', models.URLField(blank=True, help_text='The URL to redirect donors to make a donation to this project.', null=True, verbose_name='Donation URL')),
                ('project', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='project_extra', to='shuup.Product')),
                ('sponsored_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sponsored_projects', to='shuup.Supplier', verbose_name='Sponsored by')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OffPlatformDonation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, help_text='How much did you donate?', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Amount')),
                ('donated_on', models.DateField(help_text='When did you donate?', verbose_name='Donated on')),
                ('description', models.CharField(help_text='Who did you help?', max_length=68, verbose_name='Where did you give to?')),
                ('donor', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='off_platform_donations', to='shuup.PersonContact')),
            ],
        ),
        migrations.CreateModel(
            name='OfficeSustainabilityGoals',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('goals', models.ManyToManyField(blank=True, related_name='office_sustainability_goals', to='givesome.SustainabilityGoal', verbose_name='offices')),
                ('office', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='office_sustainability_goals', to='givesome.GivesomeOffice')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='NullifiedGivecardBatch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.IntegerField()),
                ('nullified_on', models.DateField(auto_now=True)),
                ('batch', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='givesome.GivecardBatch')),
                ('nullified_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='shuup.PersonContact')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GivesomePurseAllocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weight', models.PositiveIntegerField(default=0, verbose_name='weight')),
                ('purse', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='allocations', to='givesome.GivesomePurse')),
                ('shop_product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='purse_allocations', to='shuup.ShopProduct')),
            ],
            options={
                'verbose_name': 'givesome purse allocation',
                'verbose_name_plural': 'givesome purse allocations',
            },
        ),
        migrations.CreateModel(
            name='GivesomePromotedProduct',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ordering', models.IntegerField(default=0)),
                ('office', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='promoted_projects', to='givesome.GivesomeOffice')),
                ('shop_product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='promotions', to='shuup.ShopProduct')),
                ('supplier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='promoted_projects', to='shuup.Supplier')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GivesomeGif',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(db_index=True, default=True, verbose_name='active')),
                ('gif', filer.fields.image.FilerImageField(blank=True, help_text='Gif that can be displayed on the checkout competion.', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.FILER_IMAGE_MODEL, verbose_name='gif')),
            ],
        ),
        migrations.CreateModel(
            name='GivesomeDonationData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('donation_type', enumfields.fields.EnumIntegerField(enum=givesome.enums.GivesomeDonationType, verbose_name='Donation Type')),
                ('batch', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='givesome_donation_data', to='givesome.GivecardBatch', verbose_name='Givecard Batch')),
                ('office', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='givesome_donation_data', to='givesome.GivesomeOffice', verbose_name='Office')),
                ('payment', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='givesome_donation_data', to='shuup.Payment', verbose_name='Payment')),
                ('purse', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='givesome_donation_data', to='givesome.GivesomePurse', verbose_name='Givesome Purse')),
                ('supplier', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='givesome_donation_data', to='shuup.Supplier', verbose_name='Supplier')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GivesomeCompetition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='created on')),
                ('start_date', models.DateTimeField(help_text='Start date of the competition', verbose_name='starting')),
                ('end_date', models.DateTimeField(help_text='End date of the competition', verbose_name='ending')),
                ('slug', models.SlugField(help_text='Name of competition', max_length=128, unique=True)),
                ('active', models.BooleanField(default=True, help_text='Is this competition active?', verbose_name='active')),
                ('competition_key', models.CharField(help_text='Key for customers to enter competition', max_length=64)),
                ('competition_runner', models.ForeignKey(blank=True, help_text='The vendor running the competition', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='competition_runner', to='shuup.Supplier', verbose_name='Competition Runner')),
                ('competitors', models.ManyToManyField(blank=True, help_text='Add competitors here (competitors can also join if you give them the key / link to the competition)', related_name='competitors', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GivecardPurseCharge',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('charge_date', models.DateTimeField(editable=False, verbose_name='Charge date')),
                ('charge_amount', models.PositiveIntegerField(help_text='Amount of balance transferred from the Givecard Batch to Givesome Purse', verbose_name='Charge amount')),
                ('batch', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='givesome_purse_charge', to='givesome.GivecardBatch', verbose_name='Givesome Purse Charge')),
                ('purse', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='purse_charges', to='givesome.GivesomePurse', verbose_name='Givesome Purse')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GivecardCampaign',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='created on')),
                ('identifier', shuup.core.fields.InternalIdentifierField(blank=True, editable=False, max_length=64, null=True, unique=True)),
                ('archived', models.BooleanField(default=False, help_text='Archived Givecard Campaigns are hidden on Vendor dashboards.', verbose_name='Archived')),
                ('group', models.ForeignKey(blank=True, help_text='This is used to group Campaigns to different groups in the Vendor Dashboard, with their own subtotals', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='campaigns', to='givesome.GivesomeGroup', verbose_name='Group')),
                ('image', filer.fields.image.FilerImageField(blank=True, help_text='Add an image to be shown to donors when they redeem a Givecard belonging to this campaign.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='image', to=settings.FILER_IMAGE_MODEL, verbose_name='image')),
                ('supplier', models.ForeignKey(blank=True, help_text='This Givecard Campaign and all givecards related to it will be available for selected vendor to be queried in reports.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='campaigns', to='shuup.Supplier', verbose_name='branded vendor')),
            ],
            options={
                'verbose_name_plural': 'givecard campaigns',
            },
            bases=(parler.models.TranslatableModelMixin, models.Model),
        ),
        migrations.AddField(
            model_name='givecardbatch',
            name='campaign',
            field=models.ForeignKey(blank=True, help_text='Related Givecard Campaign. This is required to enable Givecard redemption.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='batches', to='givesome.GivecardCampaign', verbose_name='givecard campaign'),
        ),
        migrations.AddField(
            model_name='givecardbatch',
            name='office',
            field=models.ForeignKey(blank=True, help_text="When user redeems a Givecard they will be redirected to this office's branded page. Givecards may also be restricted to this office depending on set 'Donation restriction type'", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='batches', to='givesome.GivesomeOffice', verbose_name='office'),
        ),
        migrations.AddField(
            model_name='givecardbatch',
            name='redirect_office',
            field=models.ForeignKey(blank=True, help_text="When user redeems a Givecard they will be redirected to this office's branded page. This field overrides `Restricted Supplier` and `Restricted Office`, and affects only redirecting. Requires selecting a `Restricted Supplier` and `Restricted Office` first, as this field contains onlysub-offices. Requires this office to be hierarchically underneath selected office on above field", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='redirect_batches', to='givesome.GivesomeOffice', verbose_name='redirect office'),
        ),
        migrations.AddField(
            model_name='givecardbatch',
            name='supplier',
            field=models.ForeignKey(blank=True, help_text="When user redeems a Givecard they will be redirected to this vendor's branded page. Givecards may also be restricted to this vendor depending on set 'Donation restriction type'", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='batches', to='shuup.Supplier', verbose_name='branded vendor'),
        ),
        migrations.AddField(
            model_name='givecard',
            name='batch',
            field=models.ForeignKey(help_text='Related Givecard Campaign.', on_delete=django.db.models.deletion.CASCADE, related_name='givecards', to='givesome.GivecardBatch', verbose_name='givecard batch'),
        ),
        migrations.AddField(
            model_name='givecard',
            name='user',
            field=models.ForeignKey(blank=True, editable=False, help_text='User that has redeemed this givecard.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='givecards', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='DonationExtra',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('local_currency_total_value', shuup.core.fields.MoneyValueField(decimal_places=9, default=0, editable=False, max_digits=36, verbose_name='local currency total')),
                ('order', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='donation_extra', to='shuup.Order')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='VendorInformationTranslation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language_code', models.CharField(db_index=True, max_length=15, verbose_name='Language')),
                ('title', models.CharField(max_length=64)),
                ('page', models.TextField(help_text='Describe any information that vendors and charities should know.', verbose_name='Vendor and Charity Information')),
                ('master', parler.fields.TranslationsForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='translations', to='givesome.VendorInformation')),
            ],
            options={
                'verbose_name': 'vendor information Translation',
                'db_table': 'givesome_vendorinformation_translation',
                'db_tablespace': '',
                'managed': True,
                'default_permissions': (),
                'unique_together': {('language_code', 'master')},
            },
            bases=(parler.models.TranslatedFieldsModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='SustainabilityGoalTranslation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language_code', models.CharField(db_index=True, max_length=15, verbose_name='Language')),
                ('name', models.CharField(help_text='You can choose up to three Sustainable Development Goals (SDGs).', max_length=64, verbose_name='name')),
                ('description', models.CharField(help_text='Describe the SDG to your potential donors.', max_length=128, verbose_name='description')),
                ('master', parler.fields.TranslationsForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='translations', to='givesome.SustainabilityGoal')),
            ],
            options={
                'verbose_name': 'sustainability goal Translation',
                'db_table': 'givesome_sustainabilitygoal_translation',
                'db_tablespace': '',
                'managed': True,
                'default_permissions': (),
                'unique_together': {('language_code', 'master')},
            },
            bases=(parler.models.TranslatedFieldsModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='SupplierOfficeTerm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.PositiveIntegerField(default=0)),
                ('name', models.CharField(help_text='Enter a term you want to use for your offices/chapters/locations.', max_length=32, verbose_name='Office term')),
                ('supplier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='office_terms', to='shuup.Supplier')),
            ],
            options={
                'ordering': ('supplier', 'level'),
                'unique_together': {('supplier', 'level')},
            },
        ),
        migrations.CreateModel(
            name='ReceiptingMessagesTranslation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language_code', models.CharField(db_index=True, max_length=15, verbose_name='Language')),
                ('welcome', models.TextField(default='', help_text='Seen by users when they enter the site.')),
                ('project_card', models.TextField(default='', help_text='Seen when hovering over the project card receipting symbol.')),
                ('charity_page', models.TextField(default='', help_text='Seen when hovering over the charity page receipting symbol.')),
                ('project_page', models.TextField(default='', help_text='Seen when hovering over the project page receipting symbol.')),
                ('checkout_no', models.TextField(default='', help_text='When donors do not wish to receive a receipt.')),
                ('checkout_yes', models.TextField(default='', help_text='When donors wish to receive a receipt.')),
                ('checkout_warn', models.TextField(default='', help_text='When donors wish to receive a receipt, but have incomplete info.')),
                ('checkout_givecard', models.TextField(default='', help_text='Seen when donating by Givecard.')),
                ('portfolio', models.TextField(default='', help_text='Seen by donors who are editing their profiles.')),
                ('sign_in_header', models.TextField(default='', help_text='The title seen by an unregistered user if signing up during the receipting process.')),
                ('sign_in_step_1', models.TextField(default='', help_text='List the first step the user should follow after logging in.')),
                ('sign_in_step_2', models.TextField(default='', help_text='List the second step the user should follow after logging in.')),
                ('sign_in_step_3', models.TextField(default='', help_text='List the third step the user should follow after logging in.')),
                ('master', parler.fields.TranslationsForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='translations', to='givesome.ReceiptingMessages')),
            ],
            options={
                'verbose_name': 'receipting messages Translation',
                'db_table': 'givesome_receiptingmessages_translation',
                'db_tablespace': '',
                'managed': True,
                'default_permissions': (),
                'unique_together': {('language_code', 'master')},
            },
            bases=(parler.models.TranslatedFieldsModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='GivecardCampaignTranslation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language_code', models.CharField(db_index=True, max_length=15, verbose_name='Language')),
                ('name', models.CharField(max_length=64)),
                ('message', models.TextField(blank=True, help_text='Add a message to be shown to donors when they redeem a Givecard belonging to this campaign.', max_length=500, null=True, verbose_name='Message')),
                ('master', parler.fields.TranslationsForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='translations', to='givesome.GivecardCampaign')),
            ],
            options={
                'verbose_name': 'givecard campaign Translation',
                'db_table': 'givesome_givecardcampaign_translation',
                'db_tablespace': '',
                'managed': True,
                'default_permissions': (),
                'unique_together': {('language_code', 'master')},
            },
            bases=(parler.models.TranslatedFieldsModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='CompletionVideoTranslation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language_code', models.CharField(db_index=True, max_length=15, verbose_name='Language')),
                ('description', models.TextField(blank=True, default='', max_length=500, null=True, verbose_name='Description')),
                ('master', parler.fields.TranslationsForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='translations', to='givesome.CompletionVideo')),
            ],
            options={
                'verbose_name': 'completion video Translation',
                'db_table': 'givesome_completionvideo_translation',
                'db_tablespace': '',
                'managed': True,
                'default_permissions': (),
                'unique_together': {('language_code', 'master')},
            },
            bases=(parler.models.TranslatedFieldsModelMixin, models.Model),
        ),
    ]
